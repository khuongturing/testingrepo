module.exports = {
  swagger: '2.0',
  info: {
    version: '1.0.0',
    title: 'Turing E-Commerce API',
    description: 'API Documentation for the Turing E-commerce API challenge.',
    header: 'none'
  },
  host: 'turing-tshirtshop.herokuapp.com',
  basePath: '/api/',
  produces: ['application/json'],
  schemes: ['https'],
  securityDefinitions: {
    BearerToken: {
      description: `
        All protected routes must be accessed with a Bearer Token.
        The JWT Token is generated by the API upon user login.
        See the "customers" section for documentation on User Login`,
      type: 'apiKey',
      name: 'USER-KEY',
      in: 'header'
    },
  },
  tags: [
    {
      name: 'departments',
      description: 'Everything about Departments'
    },
    {
      name: 'categories',
      description: 'Everything about Categories'
    },
    {
      name: 'attributes',
      description: 'Everything about Attributes'
    },
    {
      name: 'products',
      description: 'Everything about Products'
    },
    {
      name: 'customers',
      description: 'Everything about Customers'
    },
    {
      name: 'orders',
      description: 'Everything about Orders'
    },
    {
      name: 'shoppingcart',
      description: 'Everything about Shopping Cart'
    },
    {
      name: 'tax',
      description: 'Everything about Department'
    },
    {
      name: 'shipping',
      description: 'Everything about Shippings'
    },
    {
      name: 'stripe',
      description: 'Everything about Stripe Ingregation and Webhooks'
    }
  ],
  paths: {
    '/departments': {
      get: {
        tags: ['departments'],
        summary: 'Get Department',
        description: 'Return a list of departments',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        responses: {
          200: {
            description: 'An array of Objects Department',
            schema: {
              $ref: '#/definitions/Department'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        }
      }
    },
    '/departments/{department_id}': {
      get: {
        tags: ['departments'],
        summary: 'Get Department by ID',
        description: 'Return a specific department by ID',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'department_id',
            in: 'path',
            description: 'ID of Department',
            required: true,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'An Object of Department',
            schema: {
              $ref: '#/definitions/Department'
            }
          },
          404: {
            description: 'Not Found Error',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        }
      }
    },
    '/categories': {
      get: {
        tags: ['categories'],
        summary: 'Get Category',
        description: 'Return a list of categories',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        responses: {
          200: {
            description: 'An array of Objects Category',
            schema: {
              $ref: '#/definitions/Category'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        }
      }
    },
    '/categories/{category_id}': {
      get: {
        tags: ['categories'],
        summary: 'Get Category by ID',
        description: 'Return a specific category by ID',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'category_id',
            in: 'path',
            description: 'ID of Category',
            required: true,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'An Object of Category',
            schema: {
              $ref: '#/definitions/Category'
            }
          },
          404: {
            description: 'Not Found Error',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        }
      }
    },
    '/categories/inProduct/{product_id}': {
      get: {
        tags: ['categories'],
        summary: 'Get Categories by product ID',
        description: 'Return categories for a product',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'product_id',
            in: 'path',
            description: 'ID of Product',
            required: true,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'An Array of Objects - Category',
            schema: {
              $ref: '#/definitions/Category'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        }
      }
    },
    '/categories/inDepartment/{department_id}': {
      get: {
        tags: ['categories'],
        summary: 'Get Categories by department ID',
        description: 'Return categories for a department',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'department_id',
            in: 'path',
            description: 'ID of Department',
            required: true,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'An Array of Objects - Category',
            schema: {
              $ref: '#/definitions/Category'
            }
          },
          404: {
            description: 'Not Found Error',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        }
      }
    },
    '/attributes': {
      get: {
        tags: ['attributes'],
        summary: 'Get Attribute list',
        description: 'Return  all attributes',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        responses: {
          200: {
            description: 'An Array of Objects - Attribute',
            schema: {
              $ref: '#/definitions/Attribute'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        }
      }
    },
    '/attributes/values/{attribute_id}': {
      get: {
        tags: ['attributes'],
        summary: 'Get Attribute values for an attribute',
        description: 'Return all attribute values for a given attribute',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        responses: {
          200: {
            description: 'An Array of Objects - Attribute Values',
            schema: {
              $ref: '#/definitions/AttributeValue'
            }
          },
          404: {
            description: 'Not Found Error',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        }
      }
    },
    '/attributes/inProduct/{product_id}': {
      get: {
        tags: ['attributes'],
        summary: 'Get Attribute for a product',
        description: 'Return all attributes for a product',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        responses: {
          200: {
            description: 'An Array of Objects - Attribute',
            schema: {
              $ref: '#/definitions/Attribute'
            }
          },
          404: {
            description: 'Not Found Error',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        }
      }
    },
    '/products': {
      get: {
        tags: ['products'],
        summary: 'Get all products',
        description: 'Return a list of products',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'page',
            in: 'query',
            description: 'Inform the page. Starting with 1. Default: 1',
            required: false,
            type: 'integer'
          },
          {
            name: 'limit',
            in: 'query',
            description: 'Limit per page, Default: 20.',
            required: false,
            type: 'integer'
          },
          {
            name: 'description_length',
            in: 'query',
            description: 'Limit of the description, Default: 200.',
            required: false,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'Return the Array of Objects in a row and pagination meta data showing next, previous, current page and last page',
            schema: {
              type: 'object',
              properties: {
                rows: {
                  type: 'array',
                  items: {
                    $ref: '#/definitions/Product',
                  }
                },
                meta: {
                  type: 'object',
                  example: {
                    last_page: 6,
                    current_page: 1,
                    previous_page: null,
                    per_page: 20,
                    next_page: 2
                  }
                },
              },
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        }
      }
    },
    '/products/search': {
      get: {
        tags: ['products'],
        summary: 'Search products',
        description: 'Return products for search query',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'query_string',
            in: 'query',
            description: 'Query to Search',
            required: true,
            type: 'integer'
          },
          {
            name: 'all_words',
            in: 'query',
            description: 'All words or no. Default: on \n\nAvailable values : on, off',
            required: false,
            type: 'integer'
          },
          {
            name: 'page',
            in: 'query',
            description: 'Inform the page. Starting with 1. Default: 1',
            required: false,
            type: 'integer'
          },
          {
            name: 'limit',
            in: 'query',
            description: 'Limit per page, Default: 20.',
            required: false,
            type: 'integer'
          },
          {
            name: 'description_length',
            in: 'query',
            description: 'Limit of the description, Default: 200.',
            required: false,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'Return the Array of Objects in a row and pagination meta data showing next, previous, current page and last page',
            schema: {
              type: 'object',
              properties: {
                rows: {
                  type: 'array',
                  items: {
                    $ref: '#/definitions/Product',
                  }
                },
                meta: {
                  type: 'object',
                  example: {
                    last_page: 6,
                    current_page: 1,
                    previous_page: null,
                    per_page: 20,
                    next_page: 2
                  }
                },
              },
            }
          },
          422: {
            description: 'Unprocessable Entity',
            schema: {
              $ref: '#/definitions/ErrorUnprocessable'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        }
      }
    },
    '/products/{product_id}': {
      get: {
        tags: ['products'],
        summary: 'Get Product by ID',
        description: 'Return a specific product by ID',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'product_id',
            in: 'path',
            description: 'ID of Product',
            required: true,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'An Object of Product',
            schema: {
              $ref: '#/definitions/Product'
            }
          },
          404: {
            description: 'Not Found Error',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        }
      }
    },
    '/products/inCategory/{category_id}': {
      get: {
        tags: ['products'],
        summary: 'Get all products for a category',
        description: 'Return a list of products under specific category',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'category_id',
            in: 'path',
            description: 'value of Category ID',
            required: true,
            type: 'integer'
          },
          {
            name: 'page',
            in: 'query',
            description: 'Inform the page. Starting with 1. Default: 1',
            required: false,
            type: 'integer'
          },
          {
            name: 'limit',
            in: 'query',
            description: 'Limit per page, Default: 20.',
            required: false,
            type: 'integer'
          },
          {
            name: 'description_length',
            in: 'query',
            description: 'Limit of the description, Default: 200.',
            required: false,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'Return the Array of Objects in a row and pagination meta data showing next, previous, current page and last page',
            schema: {
              type: 'object',
              properties: {
                rows: {
                  type: 'array',
                  items: {
                    $ref: '#/definitions/Product',
                  }
                },
                meta: {
                  type: 'object',
                  example: {
                    last_page: 6,
                    current_page: 1,
                    previous_page: null,
                    per_page: 20,
                    next_page: 2
                  }
                },
              },
            }
          },
          404: {
            description: 'Not Found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        }
      }
    },
    '/products/inDepartment/{department_id}': {
      get: {
        tags: ['products'],
        summary: 'Get all products for a department',
        description: 'Return a list of products under specific department',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'department_id',
            in: 'path',
            description: 'value of Department ID',
            required: true,
            type: 'integer'
          },
          {
            name: 'page',
            in: 'query',
            description: 'Inform the page. Starting with 1. Default: 1',
            required: false,
            type: 'integer'
          },
          {
            name: 'limit',
            in: 'query',
            description: 'Limit per page, Default: 20.',
            required: false,
            type: 'integer'
          },
          {
            name: 'description_length',
            in: 'query',
            description: 'Limit of the description, Default: 200.',
            required: false,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'Return the Array of Objects in a row and pagination meta data showing next, previous, current page and last page',
            schema: {
              type: 'object',
              properties: {
                rows: {
                  type: 'array',
                  items: {
                    $ref: '#/definitions/Product',
                  }
                },
                meta: {
                  type: 'object',
                  example: {
                    last_page: 6,
                    current_page: 1,
                    previous_page: null,
                    per_page: 20,
                    next_page: 2
                  }
                },
              },
            }
          },
          404: {
            description: 'Not Found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        }
      }
    },
    '/products/{product_id}/details': {
      get: {
        tags: ['products'],
        summary: 'Get Details of a product',
        description: 'Return a specific product with the details',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'product_id',
            in: 'path',
            description: 'ID of Product',
            required: true,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'An Object of Product',
            schema: {
              $ref: '#/definitions/Product'
            }
          },
          404: {
            description: 'Not Found Error',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        }
      }
    },
    '/products/{product_id}/locations': {
      get: {
        tags: ['products'],
        summary: 'Get all locations for a product',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'product_id',
            in: 'path',
            description: 'value of Product ID',
            required: true,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'Return the Array of Location Objects',
            schema: {
              type: 'array',
              items: {
                $ref: '#/definitions/ProductLocation',
              }
            }
          },
          404: {
            description: 'Not Found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        }
      }
    },
    '/products/{product_id}/reviews': {
      get: {
        tags: ['products'],
        summary: 'Get all reviews for a product',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'product_id',
            in: 'path',
            description: 'value of Product ID',
            required: true,
            type: 'integer'
          },
        ],
        responses: {
          200: {
            description: 'Return the Array of Review Objects',
            schema: {
              type: 'array',
              items: {
                $ref: '#/definitions/Review',
              }
            }
          },
          404: {
            description: 'Not Found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        }
      },
      post: {
        tags: ['products'],
        summary: 'Create a review for a product',
        consumes: [
          'application/x-www-form-urlencoded',
        ],
        parameters: [
          {
            name: 'product_id',
            in: 'path',
            description: 'value of Product ID',
            required: true,
            type: 'integer'
          },
          {
            name: 'review',
            in: 'formData',
            description: 'Review Text for the Product',
            required: true,
            type: 'string'
          },
          {
            name: 'rating',
            in: 'formData',
            description: 'Rating for the Product',
            required: true,
            type: 'integer'
          },
        ],
        responses: {
          201: {
            description: 'Return an Object of Review',
            schema: {
              $ref: '#/definitions/Review',
            }
          },
          403: {
            description: 'Unauthorized',
            schema: {
              $ref: '#/definitions/Unauthorized'
            }
          },
          404: {
            description: 'Not Found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          },
          422: {
            description: 'Unprocessable Entityt',
            schema: {
              $ref: '#/definitions/ErrorUnprocessable'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        },
        security: [
          { BearerToken: [] }
        ],
      }
    },
    '/customers': {
      post: {
        tags: ['customers'],
        summary: 'Register a new Customer',
        description: 'Save customer\'s details',
        responses: {
          200: {
            description: 'Return an Object of Customer with authentication credentials',
            schema: {
              $ref: '#/definitions/CustomerRegister'
            }
          },
          409: {
            description: 'Email already used',
            schema: {
              $ref: '#/definitions/Error'
            }
          },
          422: {
            description: 'Unprocessable Entity',
            schema: {
              $ref: '#/definitions/ErrorUnprocessable'
            }
          },
        },
        parameters: [
          {
            name: 'name',
            in: 'formData',
            description: 'Name of User.',
            required: true,
            type: 'string'
          },
          {
            name: 'email',
            in: 'formData',
            description: 'Email of User.',
            required: true,
            type: 'string'
          },
          {
            name: 'password',
            in: 'formData',
            description: 'Password of User.',
            required: true,
            type: 'string'
          }
        ],
      }
    },
    '/customers/login': {
      post: {
        tags: ['customers'],
        summary: 'Sign in a Customer',
        description: 'Customer Login.',
        responses: {
          200: {
            description: 'Return an Object of Customer with authentication credentials',
            schema: {
              $ref: '#/definitions/CustomerRegister'
            }
          },
          403: {
            description: 'Forbidden',
            schema: {
              $ref: '#/definitions/Forbidden'
            }
          }
        },
        parameters: [
          {
            name: 'email',
            in: 'formData',
            description: 'Email of Customer.',
            required: true,
            type: 'string'
          },
          {
            name: 'password',
            in: 'formData',
            description: 'Password of Customer.',
            required: true,
            type: 'string'
          }
        ],
        security: []
      }
    },
    '/customers/facebook': {
      post: {
        tags: ['customers'],
        summary: 'Sign in with a facebook login token.',
        description: 'Customer Login with Facebook.',
        responses: {
          200: {
            description: 'Return an Object of Customer with auth credentials',
            schema: {
              $ref: '#/definitions/CustomerRegister'
            }
          },
          400: {
            description: 'Return an error object',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        },
        parameters: [
          {
            name: 'access_token',
            in: 'formData',
            description: 'Token generated from your facebook login.',
            required: true,
            type: 'string'
          }
        ],
      }
    },
    '/customer': {
      put: {
        tags: ['customers'],
        summary: 'Update a Customer',
        responses: {
          200: {
            description: 'Return a Customer Object',
            schema: {
              $ref: '#/definitions/Customer'
            }
          },
          401: {
            description: 'Authorization code is empty',
            schema: {
              $ref: '#/definitions/Unauthorized'
            }
          },
          403: {
            description: 'Forbidden',
            schema: {
              $ref: '#/definitions/Forbidden'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          },
        },
        parameters: [
          {
            name: 'name',
            in: 'formData',
            description: 'Customer name.',
            required: true,
            type: 'string'
          },
          {
            name: 'email',
            in: 'formData',
            description: 'Customer email.',
            required: true,
            type: 'string'
          },
          {
            name: 'password',
            in: 'formData',
            description: 'Customer password.',
            required: false,
            type: 'string'
          },
          {
            name: 'day_phone',
            in: 'formData',
            description: 'Customer day phone.',
            required: false,
            type: 'string'
          },
          {
            name: 'eve_phone',
            in: 'formData',
            description: 'Customer evening phone.',
            required: false,
            type: 'string'
          },
          {
            name: 'mob_phone',
            in: 'formData',
            description: 'Customer mobile phone.',
            required: false,
            type: 'string'
          }
        ],
        security: [
          { BearerToken: [] }
        ]
      },
      get: {
        tags: ['customers'],
        summary: 'Get authenticated Customer',
        responses: {
          200: {
            description: 'Return an Object of Customer',
            schema: {
              $ref: '#/definitions/Customer'
            }
          },
          401: {
            description: 'Authorization code is empty',
            schema: {
              $ref: '#/definitions/Unauthorized'
            }
          },
          403: {
            description: 'Forbidden',
            schema: {
              $ref: '#/definitions/Forbidden'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          },
        },
        security: [
          { BearerToken: [] }
        ]
      }
    },
    '/customers/address': {
      put: {
        tags: ['customers'],
        summary: 'Update the address of the customer',
        responses: {
          200: {
            description: 'Return a Customer Object',
            schema: {
              $ref: '#/definitions/Customer'
            }
          },
          401: {
            description: 'Unauthorized',
            schema: {
              $ref: '#/definitions/Unauthorized'
            }
          }
        },
        parameters: [
          {
            name: 'address_1',
            in: 'formData',
            description: 'Address 1',
            required: true,
            type: 'string'
          },
          {
            name: 'address_2',
            in: 'formData',
            description: 'Address 2',
            required: false,
            type: 'string'
          },
          {
            name: 'city',
            in: 'formData',
            description: 'City',
            required: true,
            type: 'string'
          },
          {
            name: 'region',
            in: 'formData',
            description: 'Region',
            required: true,
            type: 'string'
          },
          {
            name: 'postal_code',
            in: 'formData',
            description: 'Postal Code',
            required: true,
            type: 'string'
          },
          {
            name: 'country',
            in: 'formData',
            description: 'Country',
            required: true,
            type: 'string'
          },
          {
            name: 'shipping_region_id',
            in: 'formData',
            description: 'Shipping Region ID',
            required: true,
            type: 'integer'
          }
        ],
        security: [
          { BearerToken: [] }
        ]
      }
    },
    '/customers/creditCard': {
      put: {
        tags: ['customers'],
        summary: 'Update the credit card of the customer',
        responses: {
          200: {
            description: 'Return a Customer Object.',
            schema: {
              $ref: '#/definitions/Customer'
            }
          },
          401: {
            description: 'Unauthorized',
            schema: {
              $ref: '#/definitions/Unauthorized'
            }
          },
          403: {
            description: 'Forbidden',
            schema: {
              $ref: '#/definitions/Forbidden'
            }
          }
        },
        parameters: [
          {
            name: 'credit_card',
            in: 'formData',
            description: 'Credit Card of the customer',
            required: true,
            type: 'string'
          }
        ],
        security: [
          { BearerToken: [] }
        ]
      }
    },
    '/orders': {
      post: {
        tags: ['orders'],
        summary: 'Create a new Order',
        responses: {
          200: {
            description: 'Return the newly created Order',
            schema: {
              $ref: '#/definitions/Order'
            }
          },
          401: {
            description: 'Unauthorized',
            schema: {
              $ref: '#/definitions/Unauthorized'
            }
          },
          403: {
            description: 'Forbidden',
            schema: {
              $ref: '#/definitions/Forbidden'
            }
          },
        },
        parameters: [
          {
            name: 'cart_id',
            in: 'formData',
            description: 'Cart ID',
            required: true,
            type: 'string'
          },
          {
            name: 'shipping_id',
            in: 'formData',
            description: 'Shipping ID',
            required: true,
            type: 'integer'
          },
          {
            name: 'tax_id',
            in: 'formData',
            description: 'Tax ID',
            required: true,
            type: 'integer'
          }
        ],
        security: [
          { BearerToken: [] }
        ]
      }
    },
    '/orders/{order_id}': {
      get: {
        tags: ['orders'],
        summary: 'Get details of an Order',
        responses: {
          200: {
            description: 'Return an Order Object',
            schema: {
              $ref: '#/definitions/Order'
            }
          },
          401: {
            description: 'Unauthorized',
            schema: {
              $ref: '#/definitions/Unauthorized'
            }
          },
          404: {
            description: 'Order is not found',
            schema: {
              $ref: '#/definitions/NotFound'
            }
          }
        },
        parameters: [
          {
            name: 'order_id',
            in: 'path',
            description: 'Order ID',
            required: true,
            type: 'integer'
          }
        ],
        security: [
          {
            UserSecurity: []
          }
        ]
      }
    },
    '/orders/inCustomer': {
      get: {
        tags: ['orders'],
        summary: 'Get orders made by a Customer',
        responses: {
          200: {
            description: 'Return an array of Orders'
          },
          401: {
            description: 'Unauthorized',
            schema: {
              $ref: '#/definitions/Unauthorized'
            }
          }
        },
        security: [
          { BearerToken: [] }
        ]
      }
    },
    '/orders/shortDetail/{order_id}': {
      get: {
        tags: ['orders'],
        summary: 'Get short details about Order',
        responses: {
          200: {
            description: 'Return an Order object',
            schema: {
              properties: {
                order_id: {
                  type: 'integer',
                  example: 1
                },
                total_amount: {
                  type: 'integer',
                  example: 1
                },
                created_on: {
                  type: 'string',
                  example: ''
                },
                shipped_on: {
                  type: 'string',
                  example: ''
                },
                status: {
                  type: 'string',
                  example: 'paid'
                },
                name: {
                  type: 'string',
                  example: 'Test'
                }
              }
            }
          },
          401: {
            description: 'Unauthorized',
            schema: {
              $ref: '#/definitions/Unauthorized'
            }
          }
        },
        parameters: [
          {
            name: 'order_id',
            in: 'path',
            description: 'Order ID',
            required: true,
            type: 'integer'
          }
        ],
        security: [
          { BearerToken: [] }
        ]
      }
    },
    '/shoppingcart/generateUniqueId': {
      get: {
        tags: ['shoppingcart'],
        summary: 'Generete unique cart id',
        responses: {
          200: {
            description: 'object having property unique cart id',
            schema: {
              type: 'object',
              properties: {
                cart_id: {
                  type: 'string',
                  example: 'abc123456nj'
                }
              }
            }
          },
          500: {
            description: 'Internal server error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        },
      }
    },
    '/shoppingcart/add': {
      post: {
        tags: ['shoppingcart'],
        summary: 'Add a product into the cart',
        responses: {
          200: {
            description: 'Return an array of all products existing in the cart',
            schema: {
              type: 'array',
              items: {
                $ref: '#/definitions/CartProduct'
              }
            }
          },
          400: {
            description: 'Cart or Product is not Found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        },
        parameters: [
          {
            name: 'cart_id',
            in: 'formData',
            description: 'Cart ID.',
            required: true,
            type: 'string'
          },
          {
            name: 'product_id',
            in: 'formData',
            description: 'Product ID.',
            required: true,
            type: 'integer'
          },
          {
            name: 'attributes',
            in: 'formData',
            description: 'Attributes of Product.',
            required: true,
            type: 'string'
          }
        ],
      }
    },
    '/shoppingcart/{cart_id}': {
      get: {
        tags: ['shoppingcart'],
        summary: 'Get List of Products in Shopping Cart',
        responses: {
          200: {
            description: 'Return an array of products in the cart.',
            schema: {
              type: 'array',
              items: {
                $ref: '#/definitions/CartProduct'
              }
            }
          },
          404: {
            description: 'Cart Not Found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        },
        parameters: [
          {
            name: 'cart_id',
            in: 'path',
            description: 'Cart ID.',
            required: true,
            type: 'string'
          }
        ],
        security: []
      }
    },
    '/shoppingcart/update/{item_id}': {
      put: {
        tags: ['shoppingcart'],
        summary: 'Update an item in the cart',
        responses: {
          200: {
            description: 'Return an array of all products in the cart.',
            schema: {
              type: 'array',
              items: {
                $ref: '#/definitions/CartProduct'
              }
            }
          },
          404: {
            description: 'Item not found',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        },
        parameters: [
          {
            name: 'item_id',
            in: 'path',
            description: 'Item ID.',
            required: true,
            type: 'integer'
          },
          {
            name: 'quantity',
            in: 'formData',
            description: 'Item Quantity.',
            required: true,
            type: 'integer'
          }
        ],
        security: []
      }
    },
    '/shoppingcart/empty/{cart_id}': {
      delete: {
        tags: ['shoppingcart'],
        summary: 'Empty cart',
        responses: {
          200: {
            description: 'Request was successful'
          },
          404: {
            description: 'Cart is not found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        },
        parameters: [
          {
            name: 'cart_id',
            in: 'path',
            description: 'Cart ID.',
            required: true,
            type: 'string'
          }
        ],
        security: []
      }
    },
    '/shoppingcart/totalAmount/{cart_id}': {
      get: {
        tags: ['shoppingcart'],
        summary: 'Return the total amount of items in a Cart',
        responses: {
          200: {
            description: 'Return the total amount',
            schema: {
              properties: {
                total_amount: {
                  type: 'integer',
                  example: 5
                }
              }
            }
          },
          404: {
            description: 'Cart is not found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          },
        },
        parameters: [
          {
            name: 'cart_id',
            in: 'path',
            description: 'Cart ID.',
            required: true,
            type: 'string'
          }
        ],
        security: []
      }
    },
    '/shoppingcart/saveForLater/{item_id}': {
      get: {
        tags: ['shoppingcart'],
        summary: 'Save a Product for latter',
        responses: {
          200: {
            description: 'Request successful'
          },
          404: {
            description: 'Item Not Found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        },
        parameters: [
          {
            name: 'item_id',
            in: 'path',
            description: 'Item ID.',
            required: true,
            type: 'integer'
          }
        ],
        security: []
      }
    },
    '/shoppingcart/getSaved/{cart_id}': {
      get: {
        tags: ['shoppingcart'],
        summary: 'Get Products saved for latter',
        responses: {
          200: {
            description: 'Return an arry of items in the cart, saved for later',
            schema: {
              $ref: '#definitions/CartProduct'
            }
          },
          404: {
            description: 'Cart not found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        },
        parameters: [
          {
            name: 'cart_id',
            in: 'path',
            description: 'Cart ID.',
            required: true,
            type: 'string'
          }
        ],
      }
    },
    '/shoppingcart/removeProduct/{item_id}': {
      delete: {
        tags: ['shoppingcart'],
        summary: 'Remove a product from the cart',
        responses: {
          200: {
            description: 'Request successful'
          },
          404: {
            description: 'Item Not Found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        },
        parameters: [
          {
            name: 'item_id',
            in: 'path',
            description: 'Item ID.',
            required: true,
            type: 'integer'
          }
        ],
      }
    },
    '/tax': {
      get: {
        tags: ['tax'],
        summary: 'Get all Taxes',
        description: 'Return an array of Tax.',
        responses: {
          200: {
            description: 'An array of Tax objects',
            schema: {
              type: 'array',
              items: {
                $ref: '#definitions/Tax'
              }
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        },
      }
    },
    '/tax/{tax_id}': {
      get: {
        tags: ['tax'],
        summary: 'Get Tax by ID',
        description: 'Return a tax by ID.',
        parameters: [
          {
            name: 'tax_id',
            in: 'path',
            required: true,
            description: 'ID of Tax',
            type: 'integer'
          }
        ],
        responses: {
          200: {
            description: 'An object of Tax',
            schema: {
              $ref: '#definitions/Tax'
            }
          },
          400: {
            description: 'Return a error object',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        },
        security: []
      }
    },
    '/shipping/regions': {
      get: {
        tags: ['shipping'],
        summary: 'Return all shipping regions',
        responses: {
          200: {
            description: 'Return a list of shipping regions',
            schema: {
              type: 'array',
              items: {
                properties: {
                  shipping_region_id: {
                    type: 'integer',
                    example: 1
                  },
                  shipping_region: {
                    type: 'string',
                    example: 'Europe'
                  }
                }
              }
            }
          },
          500: {
            description: 'Internal Server Error',
            schema: {
              $ref: '#/definitions/Error'
            }
          }
        },
        security: []
      }
    },
    '/shipping/regions/{shipping_region_id}': {
      get: {
        tags: ['shipping'],
        summary: 'Return shippings under a shipping region',
        responses: {
          200: {
            description: 'Return an array of Shippings',
            schema: {
              type: 'array',
              items: {
                properties: {
                  shipping_id: {
                    type: 'integer',
                    example: 1
                  },
                  shipping_type: {
                    type: 'string',
                    example: 'Next Day Delivery ($20)'
                  },
                  shipping_cost: {
                    type: 'string',
                    example: '20.00'
                  },
                  shipping_region_id: {
                    type: 'integer',
                    example: 2
                  }
                }
              }
            }
          },
          404: {
            description: 'Shipping region not found',
            schema: {
              $ref: '#/definitions/NotFoundError'
            }
          }
        },
        parameters: [
          {
            name: 'shipping_region_id',
            in: 'path',
            description: 'Shipping Region Id',
            required: true,
            type: 'integer'
          }
        ],
        security: []
      }
    },
    '/stripe/charge': {
      post: {
        tags: ['stripe'],
        summary: 'Receive payments from the frontend and create a charge.',
        description: 'Create a charge and update the status of an order',
        responses: {
          200: {
            description: 'The order for which payment is made',
            schema: {
              $ref: '#/definitions/Order'
            }
          },
          400: {
            description: 'Return a error object',
            schema: {
              $ref: '#/definitions/Error'
            }
          },
          401: {
            description: 'Unauthorized',
            schema: {
              $ref: '#/definitions/Unauthorized'
            }
          }
        },
        parameters: [
          {
            name: 'stripeToken',
            in: 'formData',
            description: 'Our Stripe API token',
            required: true,
            type: 'string'
          },
          {
            name: 'order_id',
            in: 'formData',
            description: 'The id of the order for which payment is made',
            required: true,
            type: 'integer'
          },
          {
            name: 'description',
            in: 'formData',
            description: 'Description to order.',
            required: true,
            type: 'string'
          },
          {
            name: 'amount',
            in: 'formData',
            description: 'Only numbers like: 999',
            required: true,
            type: 'integer'
          },
          {
            name: 'currency',
            in: 'formData',
            description: 'Check here the options: https://stripe.com/docs/currencies, the default',
            required: false,
            default: 'USD',
            type: 'string'
          }
        ],
        security: []
      }
    },
  },
  definitions: {
    Attribute: {
      type: 'object',
      properties: {
        attribute_id: {
          type: 'integer',
          example: '1',
        },
        name: {
          type: 'string',
          example: 'Size',
        },
      }
    },
    AttributeValue: {
      type: 'object',
      properties: {
        attribute_value_id: {
          type: 'integer',
          example: '1',
        },
        value: {
          type: 'string',
          example: 'S',
        },
      }
    },
    Cart: {
      added_on: {
        type: 'string',
        example: '12/12/2019',
      },
      attributes: {
        type: 'string',
        example: 'LG, Red',
      },
      buy_now: {
        type: 'string',
        example: 'true',
      },
      cart_id: {
        type: 'string',
        example: 'abc1223234',
      },
      item_id: {
        type: 'integer',
        example: 1,
      },
      product_id: {
        type: 'integer',
        example: 2,
      },
      quantity: {
        type: 'integer',
        example: 4,
      },
    },
    CartProduct: {
      properties: {
        item_id: {
          type: 'integer',
          example: 30,
        },
        product_id: {
          type: 'integer',
          example: 1,
        },
        cart_id: {
          type: 'string',
          example: 'f9547df873c8',
        },
        attributes: {
          type: 'string',
          example: 'LG, Red',
        },
        quantity: {
          type: 'integer',
          example: 4,
        },
        buy_now: {
          type: 'string',
          example: true,
        },
        added_on: {
          type: 'string',
          example: '2019-06-11T12:40:26.000Z',
        },
        image: {
          type: 'string',
          example: 'arc-d-triomphe.gif',
        },
        subtotal: {
          type: 'integer',
          example: 59.96
        },
      },
    },
    Customer: {
      type: 'object',
      required: [
        'name',
        'email',
        'password',
      ],
      properties: {
        address_1: {
          type: 'string',
          example: '7, Park View, London',
        },
        address_2: {
          type: 'string',
          example: '9, Park View, London',
        },
        customer_id: {
          type: 'string',
          example: 1,
        },
        credit_card: {
          type: 'string',
          example: 'XXXXXXXX5100',
        },
        city: {
          type: 'string',
          example: 'strings',
        },
        country: {
          type: 'string',
          example: 'USA',
        },
        day_phone: {
          type: 'string',
          example: '+351323213511235',
        },
        email: {
          type: 'string',
          example: 'johndoe@gmail.com',
        },
        eve_phone: {
          type: 'string',
          example: '+351323213511235',
        },
        mob_phone: {
          type: 'string',
          example: '+351323213511235',
        },
        name: {
          type: 'string',
          example: 'John Doe',
        },
        password: {
          type: 'string',
          example: 'strings',
        },
        postal_code: {
          type: 'string',
          example: '1022222',
        },
        region: {
          type: 'string',
          example: 'strings',
        },
        shipping_region_id: {
          type: 'integer',
          example: 1,
        },
      }
    },
    CustomerRegister: {
      properties: {
        customer: {
          properties: {
            schema: {
              $ref: '#/definitions/Customer'
            }
          }
        },
        accessToken: {
          type: 'string',
          example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NTQ1LCJlbWFpbCI6ImpzYW1jaGluZW1lQGdtYWlsLmNvbSIsImlhdCI6MTU2MDIyODI3NCwiZXhwIjoxNTYwMzE0Njc0fQ.O-qp4s08UnXzABumJgxMNaL215djq0vk_kPqw6CNBSA'
        },
        expires_in: {
          type: 'string',
          example: '24h'
        }
      }
    },
    Department: {
      type: 'object',
      required: [
        'department_id',
        'name',
        'description',
      ],
      properties: {
        department_id: {
          type: 'integer',
          example: 1,
        },
        description: {
          type: 'string',
          example: 'Proud of your country? Wear a T-shirt with a national symbol stamp!',
        },
        name: {
          type: 'string',
          example: 'Regional',
        },
      }
    },
    Error: {
      type: 'object',
      properties: {
        code: {
          type: 'string',
          example: 'USR_01',
        },
        field: {
          type: 'string',
          example: 'example',
        },
        message: {
          type: 'string',
          example: 'The field example is empty',
        },
        status: {
          type: 'integer',
          example: 500,
        }
      }
    },
    ErrorUnprocessable: {
      type: 'object',
      properties: {
        code: {
          type: 'string',
          example: 'URS_01',
        },
        message: {
          type: 'string',
          example: 'The field name is required',
        },
        status: {
          type: 'integer',
          example: 422,
        }
      }
    },
    Forbidden: {
      type: 'object',
      properties: {
        code: {
          type: 'string',
          example: 'AUT_01',
        },
        message: {
          type: 'string',
          example: 'Access Unauthorized',
        },
        status: {
          type: 'integer',
          example: 403,
        }
      }
    },
    NotFoundError: {
      type: 'object',
      properties: {
        code: {
          type: 'string',
          example: 'USR_01',
        },
        message: {
          type: 'string',
          example: 'The resource is not found',
        },
        status: {
          type: 'integer',
          example: 404,
        }
      }
    },
    Order: {
      properties: {
        created_on: {
          type: 'string',
          example: '2019-06-11T07:05:03.659Z',
        },
        status: {
          type: 'integer',
          example: 0,
        },
        order_id: {
          type: 'integer',
          example: 1,
        },
        total_amount: {
          type: 'integer',
          example: 29.98,
        },
        comments: {
          type: 'string',
          example: '',
        },
        customer_id: {
          type: 'integer',
          example: 548,
        },
        auth_code: {
          type: 'string',
          example: '',
        },
        reference: {
          type: 'string',
          example: '',
        },
        shipping_id: {
          type: 'string',
          example: '1',
        },
        tax_id: {
          type: 'string',
          example: '1'
        },
      },
    },
    Product: {
      type: 'object',
      properties: {
        description: {
          type: 'string',
          example: 'The Fur Merchants". Not all the beautiful stained glass in the great cathedrals depicts saints and angels! Lay aside your furs for the summer and wear this beautiful T-shirt!'
        },
        discounted_price: {
          type: 'string',
          example: '15.95'
        },
        display: {
          type: 'integer',
          example: 1
        },
        image: {
          type: 'string',
          example: 'chartres-cathedral-thumbnail.gif'
        },
        image_2: {
          type: 'string',
          example: 'chartres-cathedral-thumbnail.gif'
        },
        name: {
          type: 'string',
          example: 'Chartres Cathedral'
        },
        price: {
          type: 'string',
          example: '16.95'
        },
        product_id: {
          type: 'integer',
          example: 1
        },
        thumbnail: {
          type: 'string',
          example: 'chartres-cathedral-thumbnail.gif'
        },
      }
    },
    ProductLocation: {
      type: 'object',
      properties: {
        category_id: {
          type: 'integer',
          example: 1,
        },
        category_name: {
          type: 'string',
          example: 'French',
        },
        department_id: {
          type: 'integer',
          example: 1,
        },
        department_name: {
          type: 'string',
          example: 'Regional',
        },
      }
    },
    Review: {
      type: 'object',
      properties: {
        created_on: {
          type: 'string',
          example: '2019-06-08T21:59:10.000Z',
        },
        rating: {
          type: 'integer',
          example: 4,
        },
        review: {
          type: 'string',
          example: 'That\'s a good product. The best for me.',
        },
        review_id: {
          type: 'integer',
          example: 1,
        },
        reviewer: {
          type: 'string',
          example: 'John Doe',
        },
        product_id: {
          type: 'integer',
          example: 1,
        },
      }
    },
    Unauthorized: {
      type: 'object',
      properties: {
        code: {
          type: 'string',
          example: 'AUT_02',
        },
        message: {
          type: 'string',
          example: 'Access Unauthorized',
        },
        status: {
          type: 'integer',
          example: 403,
        }
      }
    },
    Tax: {
      properties: {
        tax_id: {
          type: 'integer',
          example: 1
        },
        tax_type: {
          type: 'string',
          example: 'Sales Tax at 8.5%'
        },
        tax_percentage: {
          type: 'string',
          example: '4.50'
        }
      }
    }
  }
};
